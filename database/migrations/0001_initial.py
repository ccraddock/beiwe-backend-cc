# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-18 22:06
from __future__ import unicode_literals

import database.models
import database.validators
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChunkRegistry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('is_chunkable', models.BooleanField()),
                ('chunk_path', models.CharField(max_length=256)),
                ('chunk_hash', models.CharField(blank=True, max_length=25)),
                ('data_type', models.CharField(choices=[(b'accelerometer', b'accelerometer'), (b'bluetooth', b'bluetooth'), (b'calls', b'calls'), (b'gps', b'gps'), (b'identifiers', b'identifiers'), (b'app_log', b'app_log'), (b'power_state', b'power_state'), (b'survey_answers', b'survey_answers'), (b'survey_timings', b'survey_timings'), (b'texts', b'texts'), (b'audio_recordings', b'audio_recordings'), (b'wifi', b'wifi'), (b'proximity', b'proximity'), (b'gyro', b'gyro'), (b'magnetometer', b'magnetometer'), (b'devicemotion', b'devicemotion'), (b'reachability', b'reachability')], max_length=32)),
                ('time_bin', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DecryptionKeyError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('file_path', models.CharField(max_length=256)),
                ('contents', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('accelerometer', models.BooleanField(default=True)),
                ('gps', models.BooleanField(default=True)),
                ('calls', models.BooleanField(default=True)),
                ('texts', models.BooleanField(default=True)),
                ('wifi', models.BooleanField(default=True)),
                ('bluetooth', models.BooleanField(default=False)),
                ('power_state', models.BooleanField(default=True)),
                ('proximity', models.BooleanField(default=False)),
                ('gyro', models.BooleanField(default=False)),
                ('magnetometer', models.BooleanField(default=False)),
                ('devicemotion', models.BooleanField(default=False)),
                ('reachability', models.BooleanField(default=True)),
                ('allow_upload_over_cellular_data', models.BooleanField(default=False)),
                ('accelerometer_off_duration_seconds', models.PositiveIntegerField(default=10)),
                ('accelerometer_on_duration_seconds', models.PositiveIntegerField(default=10)),
                ('bluetooth_on_duration_seconds', models.PositiveIntegerField(default=60)),
                ('bluetooth_total_duration_seconds', models.PositiveIntegerField(default=300)),
                ('bluetooth_global_offset_seconds', models.PositiveIntegerField(default=0)),
                ('check_for_new_surveys_frequency_seconds', models.PositiveIntegerField(default=21600)),
                ('create_new_data_files_frequency_seconds', models.PositiveIntegerField(default=900)),
                ('gps_off_duration_seconds', models.PositiveIntegerField(default=600)),
                ('gps_on_duration_seconds', models.PositiveIntegerField(default=60)),
                ('seconds_before_auto_logout', models.PositiveIntegerField(default=600)),
                ('upload_data_files_frequency_seconds', models.PositiveIntegerField(default=3600)),
                ('voice_recording_max_time_length_seconds', models.PositiveIntegerField(default=240)),
                ('wifi_log_frequency_seconds', models.PositiveIntegerField(default=300)),
                ('gyro_off_duration_seconds', models.PositiveIntegerField(default=600)),
                ('gyro_on_duration_seconds', models.PositiveIntegerField(default=60)),
                ('magnetometer_off_duration_seconds', models.PositiveIntegerField(default=600)),
                ('magnetometer_on_duration_seconds', models.PositiveIntegerField(default=60)),
                ('devicemotion_off_duration_seconds', models.PositiveIntegerField(default=600)),
                ('devicemotion_on_duration_seconds', models.PositiveIntegerField(default=60)),
                ('about_page_text', models.TextField(default=b"The Beiwe application runs on your phone and helps researchers collect information about your behaviors. Beiwe may ask you to fill out short surveys or to record your voice. It may collect information about your location (using phone GPS) and how much you move (using phone accelerometer). Beiwe may also monitor how much you use your phone for calling and texting and keep track of the people you communicate with. Importantly, Beiwe never records the names or phone numbers of anyone you communicate with. While it can tell if you call the same person more than once, it does not know who that person is. Beiwe also does not record the content of your text messages or phone calls. Beiwe may keep track of the different Wi-Fi networks and Bluetooth devices around your phone, but the names of those networks are replaced with random codes.\n\nAlthough Beiwe collects large amounts of data, the data is processed to protect your privacy. This means that it does not know your name, your phone number, or anything else that could identify you. Beiwe only knows you by an identification number. Because Beiwe does not know who you are, it cannot communicate with your clinician if you are ill or in danger. Researchers will not review the data Beiwe collects until the end of the study. To make it easier for you to connect with your clinician, the 'Call my Clinician' button appears at the bottom of every page.\n\nBeiwe was conceived and designed by Dr. Jukka-Pekka 'JP' Onnela at the Harvard T.H. Chan School of Public Health. Development of the Beiwe smartphone application and data analysis software is funded by NIH grant 1DP2MH103909-01 to Dr. Onnela. The smartphone application was built by Zagaran, Inc., in Cambridge, Massachusetts.")),
                ('call_clinician_button_text', models.TextField(default='Call My Clinician')),
                ('consent_form_text', models.TextField(default=b'I have read and understood the information about the study and all of my questions about the study have been answered by the study researchers.')),
                ('survey_submit_success_toast_text', models.TextField(default=b"Thank you for completing the survey. A clinician will not see your answers immediately, so if you need help or are thinking about harming yourself, please contact your clinician. You can also press the 'Call My Clinician' button.")),
                ('consent_sections', database.models.JSONTextField(default=b'{"study_tasks": {"text": "", "more": ""}, "data_use": {"text": "", "more": ""}, "withdrawing": {"text": "", "more": ""}, "privacy": {"text": "", "more": ""}, "study_survey": {"text": "", "more": ""}, "welcome": {"text": "", "more": ""}, "data_gathering": {"text": "", "more": ""}, "time_commitment": {"text": "", "more": ""}}')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncryptionErrorMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('file_name', models.CharField(max_length=256)),
                ('total_lines', models.PositiveIntegerField()),
                ('number_errors', models.PositiveIntegerField()),
                ('errors_lines', database.models.JSONTextField()),
                ('error_types', database.models.JSONTextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileProcessLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('lock_time', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileToProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('s3_file_path', models.CharField(max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineEncryptionError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[(b'AES_KEY_BAD_LENGTH', b'AES_KEY_BAD_LENGTH'), (b'EMPTY_KEY', b'EMPTY_KEY'), (b'INVALID_LENGTH', b'INVALID_LENGTH'), (b'IV_BAD_LENGTH', b'IV_BAD_LENGTH'), (b'IV_MISSING', b'IV_MISSING'), (b'LINE_EMPTY', b'LINE_EMPTY'), (b'LINE_EMPTY', b'LINE_EMPTY'), (b'MP4_PADDING', b'MP4_PADDING'), (b'MALFORMED_CONFIG', b'MALFORMED_CONFIG'), (b'PADDING_ERROR', b'PADDING_ERROR')], max_length=32)),
                ('line', models.TextField(blank=True)),
                ('base64_decryption_key', models.CharField(max_length=256)),
                ('prev_line', models.TextField(blank=True)),
                ('next_line', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('password', models.CharField(help_text="A hash of the user's password", max_length=44, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
                ('salt', models.CharField(max_length=24, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
                ('patient_id', models.CharField(help_text='Eight-character unique ID with characters chosen from 1-9 and a-z', max_length=8, unique=True, validators=[django.core.validators.RegexValidator(b'^[1-9a-z]+$', message=b'This field can only contain characters 1-9 and a-z.')])),
                ('device_id', models.CharField(blank=True, help_text='The ID of the device that the participant is using for the study, if any.', max_length=256)),
                ('os_type', models.CharField(blank=True, choices=[('IOS', 'IOS'), ('ANDROID', 'ANDROID'), ('', '')], help_text='The type of device the participant is using, if any.', max_length=16)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Researcher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('password', models.CharField(help_text="A hash of the user's password", max_length=44, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
                ('salt', models.CharField(max_length=24, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
                ('username', models.CharField(help_text='User-chosen username, stored in plain text', max_length=32, unique=True)),
                ('admin', models.BooleanField(default=False, help_text='Whether the researcher is also an admin')),
                ('access_key_id', models.CharField(blank=True, max_length=64, null=True, unique=True, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z+/]+={0,2}$')])),
                ('access_key_secret', models.CharField(blank=True, max_length=44, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
                ('access_key_secret_salt', models.CharField(blank=True, max_length=24, validators=[django.core.validators.RegexValidator(b'^[0-9a-zA-Z_\\-]+={0,2}$')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.TextField(help_text='Name of the study; can be of any length', unique=True)),
                ('encryption_key', models.CharField(help_text='Key used for encrypting the study data', max_length=32, validators=[database.validators.LengthValidator(32)])),
                ('object_id', models.CharField(help_text='ID used for naming S3 files', max_length=24, unique=True, validators=[database.validators.LengthValidator(24)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('content', database.models.JSONTextField(default='[]', help_text='JSON blob containing information about the survey questions.')),
                ('survey_type', models.CharField(choices=[('audio_survey', 'audio_survey'), ('tracking_survey', 'tracking_survey')], help_text='What type of survey this is.', max_length=16)),
                ('settings', database.models.JSONTextField(default='{}', help_text='JSON blob containing settings for the survey.')),
                ('timings', database.models.JSONTextField(default=b'[[], [], [], [], [], [], []]', help_text='JSON blob containing the times at which the survey is sent.')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('object_id', models.CharField(max_length=24, unique=True, validators=[database.validators.LengthValidator(24)])),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='surveys', to='database.Study')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('content', database.models.JSONTextField(default='[]', help_text='JSON blob containing information about the survey questions.')),
                ('survey_type', models.CharField(choices=[('audio_survey', 'audio_survey'), ('tracking_survey', 'tracking_survey')], help_text='What type of survey this is.', max_length=16)),
                ('settings', database.models.JSONTextField(default='{}', help_text='JSON blob containing settings for the survey.')),
                ('timings', database.models.JSONTextField(default=b'[[], [], [], [], [], [], []]', help_text='JSON blob containing the times at which the survey is sent.')),
                ('archive_start', models.DateTimeField()),
                ('archive_end', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='surveys_archive', to='database.Study')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='archives', to='database.Survey')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UploadTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('file_path', models.CharField(max_length=256)),
                ('file_size', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField()),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='upload_trackers', to='database.Participant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='researcher',
            name='studies',
            field=models.ManyToManyField(related_name='researchers', to='database.Study'),
        ),
        migrations.AddField(
            model_name='participant',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='participants', to='database.Study'),
        ),
        migrations.AddField(
            model_name='filetoprocess',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='files_to_process', to='database.Participant'),
        ),
        migrations.AddField(
            model_name='filetoprocess',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='files_to_process', to='database.Study'),
        ),
        migrations.AddField(
            model_name='devicesettings',
            name='study',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='device_settings', to='database.Study'),
        ),
        migrations.AddField(
            model_name='decryptionkeyerror',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='decryption_key_errors', to='database.Participant'),
        ),
        migrations.AddField(
            model_name='chunkregistry',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='chunk_registries', to='database.Participant'),
        ),
        migrations.AddField(
            model_name='chunkregistry',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='chunk_registries', to='database.Study'),
        ),
        migrations.AddField(
            model_name='chunkregistry',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='chunk_registries', to='database.Survey'),
        ),
    ]
